<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>5</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>pman = o_pman;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var x0 = pman.gpx;
var y0 = pman.gpy;
var vi_x = pman.potato_spd * cos(pman.fire_angle*pi/180);
var vi_y = pman.potato_spd * sin(pman.fire_angle*pi/180);

draw_set_colour(c_black);
if pman.weapon == 0 { // potato gun
    var vi_x = pman.potato_spd * cos(pman.fire_angle*pi/180);
    var vi_y = pman.potato_spd * sin(pman.fire_angle*pi/180);
    var t_horizon = (vi_y + sqrt(vi_y * vi_y + 2 * global.grav * y0)) / global.grav;
    for (var t = 0.1 * t_horizon; t &lt; t_horizon; t += 0.1 * t_horizon) {
        var px = vi_x * t + x0;
        var py = -vi_y * t + y0 + 0.5 * global.grav * t * t;
        draw_rectangle(px, py, px, py, false);
    }
} else { // arrows
     var vi_x = pman.parrow_spd * cos(pman.fire_angle*pi/180);
    var vi_y = pman.parrow_spd * sin(pman.fire_angle*pi/180);
     var t_end = room_width / pman.parrow_spd;
     for (var t = t_end / 15; t &lt; t_end; t += t_end/15) {
        var px = vi_x * t + x0;
        var py = -vi_y * t + y0;
        draw_rectangle(px, py, px, py, false);
    }
}


draw_set_colour(c_white);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
