<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_potato_man</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize Potato Man
// Variables
fire_angle = 12;
top_angle = 0;
gpx = x+14; // Gun Point X
gpy = y+4;  // Gun Point Y

recoil_amount = 0;
recoil_speed = 0;
rx = 0;
ry = 0;
recoil_recovery = 0.2;

potato_spd = 3.0;  // Default 2.0, max 3.0
recoil_amt = 1.2 // Default 1.2, Max 0.5

auto_fire_time = room_speed/3; // Time between auto fires. Defaut room_speed/3
auto_fire_time_parrow = 20; // Default 20
auto_fire = auto_fire_time;

clicked = false; // Used for max click speed

weapon = 0 // 0 = normal, 1 = bow

parrow_spd = 10.0 // Parrow speed

bow_countdown_max = 15; // Default 15
bow_countdown = bow_countdown_max;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*/// Control Potato Man (Keyboard Controls)
// Move Potato Man up and down
if keyboard_check(vk_up) {
    fire_angle++;
    fire_angle = min(fire_angle,90);
} else if keyboard_check(vk_down) {
    fire_angle--;
    fire_angle = max(fire_angle,-50);
}
top_angle = fire_angle-12;

// Calculate tip of potato gun
gpx = x+6+sqrt(98)*cos((top_angle+38)*pi/180);
gpy = y+10-sqrt(98)*sin((top_angle+38)*pi/180);

// Firing angle unit vectors (components)
var angle_x = cos(fire_angle*pi/180);
var angle_y = -sin(fire_angle*pi/180)

// Shoot a potato
if keyboard_check_pressed(vk_space) &amp;&amp; rx == 0 &amp;&amp; ry == 0 {
    pot = instance_create(gpx-1,gpy-1,o_potato);
    pot.hspd = potato_spd*angle_x*random_range(0.95,1.05);
    pot.vspd = potato_spd*angle_y*random_range(0.95,1.05);
    recoil_speed = recoil_amt;
    part_particles_create(particles.psys,gpx,gpy,particles.poof,random_range(2,4));
}

// Calculate Recoil
if recoil_speed &gt; 0 {
    rx -= recoil_speed*angle_x;
    ry -= recoil_speed*angle_y; // y-dir recoil turned off
    recoil_speed -= 0.5;
}
if rx != 0 {rx = approach(rx,0.2,0)};
if ry != 0 {ry = approach(ry,0.2,0)};
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Control Potato Man (Mouse Controls)
// Switch weapons
if mouse_check_button_pressed(mb_right) {
    weapon = !weapon;
}

//gun centre
//x + 7
//y + 6
diff_x = abs(x+7-mouse_x);
diff_y = y+6-mouse_y;
if diff_x == 0 {
    if diff_y &gt;= 0 {
        fire_angle = 90;
    } else {
        fire_angle = -50;
    }
} else {
    // Calculate Angle
    fire_angle = max(arctan(diff_y/diff_x)*180/pi,-50);
    
    if mouse_x-x-7 &lt; 0 {
        if diff_y &gt; 0 {
            var f = fire_angle
            fire_angle = -0.01*f*f+1.9*f;
        }
    }
}

if weapon == 0 {
    top_angle = fire_angle-12;
} else if weapon == 1 {
    top_angle = fire_angle;
}


// Calculate tip of potato gun
if weapon == 0 {
    gpx = x+6+sqrt(98)*cos((top_angle+38)*pi/180);
    gpy = y+10-sqrt(98)*sin((top_angle+38)*pi/180);
} else if weapon == 1 {
    gpx = x+6+sqrt(61)*cos((top_angle+45)*pi/180);
    gpy = y+10-sqrt(61)*sin((top_angle+45)*pi/180);
}

// Firing angle unit vectors (components)
var angle_x = cos(fire_angle*pi/180);
var angle_y = -sin(fire_angle*pi/180);

// Hold to auto fire
if mouse_check_button(mb_left) {
    if auto_fire &gt; 0 {
        auto_fire--;
    } else {
        if weapon == 0 {
            auto_fire = auto_fire_time;
        } else if weapon == 1 {
            auto_fire = auto_fire_time_parrow;
        }
    }
} else {
    if weapon == 0 {
        auto_fire = auto_fire_time;
    } else if weapon == 1 {
        auto_fire = auto_fire_time_parrow;
    }
}

// Bow countdown
if bow_countdown &gt; 0 {
    bow_countdown--;
}


// Shoot a potato
if mouse_check_button_pressed(mb_left) || auto_fire == 0 || clicked {
    clicked = true;
    if rx == 0 &amp;&amp; ry == 0 {
        if weapon == 0 {
            // Fire regular potato
            pot = instance_create(gpx-1,gpy-1,o_potato);
            pot.hspd = potato_spd*angle_x*random_range(0.95,1.05);
            pot.vspd = potato_spd*angle_y*random_range(0.95,1.05);
            recoil_speed = recoil_amt;
            clicked = false;
            part_particles_create(particles.psys,gpx,gpy,particles.poof,random_range(2,4));
            audio_play_sound(choose(sfx_pop1, sfx_pop2, sfx_pop3), 1, false);
        } else if weapon == 1 &amp;&amp; bow_countdown == 0 {
            // Fire potato arrow
            pot = instance_create(gpx,gpy,o_parrow);
            pot.hspd = parrow_spd*(cos(top_angle*pi/180))*random_range(0.99,1.01);
            pot.vspd = parrow_spd*(-sin(top_angle*pi/180))*random_range(0.99,1.01);
            recoil_speed = recoil_amt+0.2;
            bow_countdown = bow_countdown_max
            clicked = false;
            audio_play_sound(choose(sfx_arrow1, sfx_arrow2, sfx_arrow3), 1, false);
        }
    }
}

// Calculate Recoil
if recoil_speed &gt; 0 {
    rx -= recoil_speed*angle_x;
    ry -= recoil_speed*angle_y; // y-dir recoil turned off
    recoil_speed -= 0.5;
}
if rx != 0 {rx = approach(rx,recoil_recovery + 0.5 * (global.level - 1),0)};
if ry != 0 {ry = approach(ry,recoil_recovery + 0.5 * (global.level - 1),0)};
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw Potato Man
draw_sprite(s_pman_legs,0,x,y);

// Draw the weapon
switch weapon {
    
    case 0:
    draw_sprite_ext(s_pman_gun,0,x+7+rx,y+11,1,1,top_angle,c_white,1);
    break;
    
    case 1:
    if bow_countdown &lt; 3 {
        draw_sprite_ext(s_pman_bow,0,x+7+rx,y+11,1,1,top_angle,c_white,1);
    } else if bow_countdown &lt; 6 {
        draw_sprite_ext(s_pman_bow,2,x+7+rx,y+11,1,1,top_angle,c_white,1);
    } else {
        draw_sprite_ext(s_pman_bow,1,x+7+rx,y+11,1,1,top_angle,c_white,1);
    }
    break;
    
}

draw_sprite_ext(s_pman_top,0,x+7,y+11,1,1,top_angle,c_white,1);

/*/ Debug Stuff
draw_text(16,32,fire_angle);
draw_text(48,32,diff_x);
draw_text(72,32,diff_y);

draw_line(gpx,gpy,gpx+diff_x,gpy);
draw_line(gpx+diff_x,gpy,gpx+diff_x,gpy-diff_y);
draw_line(gpx,gpy,gpx+diff_x,gpy-diff_y);

draw_line(gpx,gpy,gpx+50*cos(fire_angle*pi/180),gpy-50*sin(fire_angle*pi/180));
draw_circle(x+6,y+10,sqrt(61),true);
draw_set_colour(c_red);
draw_point(gpx,gpy);

draw_set_colour(c_white);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
